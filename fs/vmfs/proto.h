/* SPDX-License-Identifier: GPL-2.0 */

/*
 *  Autogenerated with cproto on:  Thu May 8 12:58:52 BST 2008
 */

#ifndef _RPOTO_H_
#define _PROTO_H_

struct vmfs_request;
struct sock;
struct statfs;

/* proc.c */
int vmfs_errno(int error);
int vmfs_open(struct dentry *dentry, int flags, int wish);
int vmfs_close(struct inode *ino);
int vmfs_close_fileid(struct dentry *dentry, s32 fileid);
int vmfs_proc_create(struct dentry *dentry, u32 mode,
		     s32 *fileid);
int vmfs_proc_mv(struct dentry *old_dentry, struct dentry *new_dentry);
int vmfs_proc_mkdir(struct dentry *dentry);
int vmfs_proc_rmdir(struct dentry *dentry);
int vmfs_proc_unlink(struct dentry *dentry);
int vmfs_proc_flush(struct vmfs_sb_info *server, s32 handle);
void vmfs_init_root_dirent(struct vmfs_sb_info *server,
			   struct vmfs_fattr *fattr,
			   struct super_block *sb);
int vmfs_proc_getattr(struct dentry *dir, struct vmfs_fattr *fattr);
int vmfs_proc_setattr(struct dentry *dir, struct vmfs_fattr *fattr);
int vmfs_proc_settime(struct dentry *dentry, struct vmfs_fattr *fattr);
int vmfs_proc_dskattr(struct dentry *dentry, struct kstatfs *kattr);
int vmfs_proc_read_link(struct vmfs_sb_info *server,
			struct dentry *dentry, char *buffer, int len);
int vmfs_proc_symlink(struct vmfs_sb_info *server,
		      struct dentry *dentry,
		      const char *oldpath);
int vmfs_proc_link(struct vmfs_sb_info *server, struct dentry *dentry,
		   struct dentry *new_dentry);
void vmfs_install_ops(struct vmfs_ops *ops);
/* dir.c */
extern const struct file_operations vmfs_dir_operations;
extern const struct inode_operations vmfs_dir_inode_operations;
extern const struct inode_operations vmfs_dir_inode_operations_unix;
void vmfs_new_dentry(struct dentry *dentry);
void vmfs_renew_times(struct dentry *dentry);
/* cache.c */
int vmfs_fill_cache(struct file *filp, struct dir_context *dirent,
		    struct vmfs_cache_control *ctrl, struct qstr *qname,
		    struct vmfs_fattr *entry);
void vmfs_invalid_dir_cache(struct inode *dir);
void vmfs_invalidate_dircache_entries(struct dentry *parent);
/* inode.c */
struct inode *vmfs_iget(struct super_block *sb,
			struct vmfs_fattr *fattr);
void vmfs_get_inode_attr(struct inode *inode, struct vmfs_fattr *fattr);
void vmfs_set_inode_attr(struct inode *inode, struct vmfs_fattr *fattr);
void vmfs_invalidate_inodes(struct vmfs_sb_info *server);
int vmfs_revalidate_inode(struct dentry *dentry);
int vmfs_getattr(const struct path *path, struct kstat *stat,
		 u32 request_mask, unsigned int flags);
int vmfs_notify_change(struct dentry *dentry, struct iattr *attr);
/* file.c */
extern const struct address_space_operations vmfs_file_aops;
extern const struct file_operations vmfs_file_operations;
extern const struct inode_operations vmfs_file_inode_operations;
/* ioctl.c */
long vmfs_unlocked_ioctl(struct file *filp, unsigned int cmd,
			 unsigned long arg);
/* symlink.c */
int vmfs_symlink(struct inode *inode, struct dentry *dentry,
		 const char *oldname);
extern const struct inode_operations vmfs_link_inode_operations;

#endif	/* _PROTO_H_ */
